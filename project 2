#include <iostream>
using namespace std;

class Tree {
public:
    int val;
    Tree* left;
    Tree* right;
    Tree* parent;

    Tree(int v) {
        val = v;
        left = nullptr;
        right = nullptr;
        parent = nullptr;
    }
};

class bst {
    static Tree* root;

public:
    static void insert(int val) {
        if (root == nullptr) {
            root = new Tree(val);
            return;
        }
        Tree* parent = nullptr;
        Tree* temp = root;
        while (temp != nullptr) {
            parent = temp;
            if (temp->val > val) {
                temp = temp->left;
            } else {
                temp = temp->right;
            }
        }
        Tree* newNode = new Tree(val);
        newNode->parent = parent;
        if (parent->val > val) {
            parent->left = newNode;
        } else {
            parent->right = newNode;
        }
    }

    static Tree* search(int val) {
        return searchHelper(root, val);
    }

    static Tree* searchHelper(Tree* root, int val) {
        if (root == nullptr || root->val == val) {
            return root;
        }
        if (val < root->val) {
            return searchHelper(root->left, val);
        } else {
            return searchHelper(root->right, val);
        }
    }

    static void deleteNode(int val) {
        root = deleteHelper(root, val);
    }

    static Tree* deleteHelper(Tree* root, int val) {
        if (root == nullptr) {
            return root;
        }

        if (val < root->val) {
            root->left = deleteHelper(root->left, val);
        } else if (val > root->val) {
            root->right = deleteHelper(root->right, val);
        } else {
            if (root->left == nullptr) {
                Tree* temp = root->right;
                if (temp != nullptr) {
                    temp->parent = root->parent;
                }
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Tree* temp = root->left;
                if (temp != nullptr) {
                    temp->parent = root->parent;
                }
                delete root;
                return temp;
            }

            root->val = minValue(root->right);
            root->right = deleteHelper(root->right, root->val);
        }

        return root;
    }

    static int minValue(Tree* root) {
        int minv = root->val;
        while (root->left != nullptr) {
            minv = root->left->val;
            root = root->left;
        }
        return minv;
    }

    static void inorder() {
        inorderHelper(root);
    }

    static void inorderHelper(Tree* root) {
        if (root == nullptr) {
            return;
        }
        inorderHelper(root->left);
        cout << root->val << " ";
        inorderHelper(root->right);
    }

    static void preorder() {
        preorderHelper(root);
    }

    static void preorderHelper(Tree* root) {
        if (root == nullptr) {
            return;
        }
        cout << root->val << " ";
        preorderHelper(root->left);
        preorderHelper(root->right);
    }

    static void postorder() {
        postorderHelper(root);
    }

    static void postorderHelper(Tree* root) {
        if (root == nullptr) {
            return;
        }
        postorderHelper(root->left);
        postorderHelper(root->right);
        cout << root->val << " ";
    }
};

Tree* bst::root = nullptr;

int main() {
    int n;
    cin >> n;
    while (n != -1) {
        bst::insert(n);
        cin >> n;
    }

    cout << "Enter a node to search" << endl;
    int searchVal;
    cin >> searchVal;
    Tree* result = bst::search(searchVal);
    if (result != nullptr) {
        cout << "Node found with value: " << result->val << endl;
    } else {
        cout << "Node not found." << endl;
    }
    
    cout << "Enter a node to delete" << endl;
    int deleteVal;
    cin >> deleteVal;
    bst::deleteNode(deleteVal);
    cout << "Node deleted." << endl;

    cout << "Inorder Traversal" << endl;
    bst::inorder();
    cout << "\nPostorder Traversal" << endl;
    bst::postorder();
    cout << "\nPreorder Traversal" << endl;
    bst::preorder();

    return 0;
}
